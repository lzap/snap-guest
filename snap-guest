#!/bin/bash
# Requirements: python-virtinst qemu-img libguestfs-mount sed bash

usage() {
cat <<USAGE
usage: $0 options

Simple script for creating copy-on-write QEMU/KVM guests.

OPTIONS:
  -h             Show this message
  -l             List avaiable images (with "base" in the name)
  -a             List all images
  -b [image]     Base image name (template) - required
  -t [image]     Target image name (and hostname) - required
  -n [network]   Network settings (default: "network=default")
  -m [MB]        Memory (default: 800 MiB)
  -c [CPUs]      Number of CPUs (default: 1)
  -p [path]      Images path (default: /var/lib/libvirt/images/)
  -d [domain]    Domain suffix like "mycompany.com" (default: none)
  -f             Force creating new guest (no questions)

EXAMPLE:

  $0 -l
  $0 -p /mnt/data/images -l
  $0 -b fedora-17-base -t test-vm
  $0 -b fedora-17-base -t test-vm2 -n bridge=br0 -d example.com
  $0 -b rhel-6-base -t test-vm -m 2048 -c 4 -p /mnt/data/images
USAGE
}

SOURCE_NAME=""
TARGET_NAME=""
NETWORK="network=default"
MEM="800"
CPUS="1"
IMAGE_DIR="/var/lib/libvirt/images"
DOMAIN=""
FORCE=0
LIST=0
LIST_ALL=0

while getopts "hlafb:t:n:m:c:d:p:" opt; do
  case $opt in
    l)
      LIST=1
      ;;
    a)
      LIST_ALL=1
      ;;
    f)
      FORCE=1
      ;;
    p)
      IMAGE_DIR="$OPTARG"
      ;;
    b)
      SOURCE_NAME="$OPTARG"
      ;;
    t)
      TARGET_NAME="$OPTARG"
      ;;
    n)
      NETWORK="$OPTARG"
      ;;
    m)
      MEM="$OPTARG"
      ;;
    c)
      CPUS="$OPTARG"
      ;;
    d)
      DOMAIN=".$OPTARG"
      ;;
    h)
      usage
      exit
      ;;
    ?)
      echo "Invalid option: $OPTARG" >&2
      usage
      exit
      ;;
  esac
done

[ $LIST -eq 1 ] && ls "$IMAGE_DIR" | grep '\.img' | grep base | sed 's/\.img//g' && exit 0
[ $LIST_ALL -eq 1 ] && ls "$IMAGE_DIR" | grep '\.img' | sed 's/\.img//g' && exit 0

if [ -z "$SOURCE_NAME" -o -z "$TARGET_NAME" ]; then
  usage
  exit 1
fi

SOURCE_IMG=$IMAGE_DIR/$SOURCE_NAME.img
TARGET_IMG=$IMAGE_DIR/$TARGET_NAME.img
MAC="52:54:00$(echo "$TARGET_NAME" | openssl dgst -md5 -binary | hexdump -e '/1 ":%02x"' -n 3)"
HOSTNM="$TARGET_NAME$DOMAIN"

if [ -f "$TARGET_IMG" ]; then
  echo "Target image already exists!"
  if [ $FORCE -eq 1 ]; then
    REPLY="y"
  else
    read -p "Shutdown and remove host with this name first (y/[n])? "
  fi
  [ "$REPLY" != "y" ] && \
    # need to do it twice (sometimes this fail)
    virsh destroy "$TARGET_NAME" 2>/dev/null; sleep 2s; \
    virsh destroy "$TARGET_NAME" 2>/dev/null; sleep 1s; \
    virsh undefine "$TARGET_NAME"
fi

echo "Creating snapshot guest $TARGET_NAME"

# -- Image Creation --------------

echo "Creating snapshot image"
qemu-img create -f qcow2 -b $SOURCE_IMG $TARGET_IMG

# -- Image Manipulation ----------

TMPDIR=$(mktemp -d $TARGET_NAME_XXXX)
echo "Configuring image volume"
guestmount -a $TARGET_IMG --rw $TMPDIR -i || exit 1
echo "Setting MAC address"
sed -i -e "s/HWADDR=.*/HWADDR=$MAC/" $TMPDIR/etc/sysconfig/network-scripts/ifcfg-eth0
echo "Setting hostname"
sed -i -e "s/HOSTNAME=.*/HOSTNAME=$HOSTNM/" $TMPDIR/etc/sysconfig/network
# remove existing record safely
grep $SOURCE_NAME $TMPDIR/etc/hosts && sed -i -e "s/$SOURCE_NAME/localbox/" $TMPDIR/etc/hosts
# add host and host.domain localhost record there
echo "127.0.0.1 $TARGET_NAME $HOSTNM" >> $TMPDIR/etc/hosts
umount $TMPDIR

# -- Image Provisioning ---------

echo "Provisioning guest $TARGET_NAME"
echo "Hostname: $HOSTNM"
echo "CPUs:     $CPUS"
echo "Memory:   $MEM"
echo "MAC:      $MAC"
virt-install --vcpus $CPUS \
  --ram $MEM --import \
  --name $TARGET_NAME \
  --disk $TARGET_IMG,format=qcow2 \
  --vnc --noautoconsole --force \
  --network=$NETWORK,mac=$MAC


echo "Waiting for IP"
i=0
until [ $i -ge 100 ] || IP_LINE=`cat /var/lib/dnsmasq/dnsmasq.leases | grep $MAC`; do
  i=$((i + 1))
  sleep 1
done

if [[ -n $IP_LINE ]]; then
  IP=`echo  $IP_LINE | awk '{print $3}'`
  if ! grep -q "$HOSTNM\$" /etc/hosts; then
    echo "Writing into /etc/hosts ip: $IP"
    echo $IP $HOSTNM >> /etc/hosts
  else
    echo "Host $HOSTNM already in hosts"
    OLD_IP=`grep "$HOSTNM\$" /etc/hosts | head -n 1 | awk '{print $1}'`
    if [[ $IP = $OLD_IP ]]; then
      echo "and these ip's match"
    else
      echo "with different ip: $OLD_IP instead of $IP"
    fi
  fi
fi

# -- EOF --

